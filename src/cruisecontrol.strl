module accelMonitor:

constant minPedals = 3.0f : float;
input Accel : float; %Car accelerator sensor
output AccelPressed; %Signal whether accelerator is pressed or not

loop
    await tick;
    if ?Accel > minPedals then
        emit AccelPressed;
    end if;
end loop
end module

module brakeMonitor:

constant minPedals = 3.0f : float;
input Brake : float; %Car brake sensor
output BrakePressed; %Signal whether brake is pressed or not

loop
    await tick;
    if ?Brake > minPedals then
        emit BrakePressed;
    end if;
end loop
end module


module cruiseSpeedMonitor:

constant minSpeed = 30.0f : float;
constant maxSpeed = 150.0f : float;
input CruiseSpeed : float;
output csExceedMin;
output csExceedMax;

loop
	await tick;
    if pre(?CruiseSpeed) > maxSpeed then
        emit csExceedMax;
    elsif pre(?CruiseSpeed) < minSpeed then
        emit csExceedMin;
    end if;
end loop
end module

module cruiseSpeedSetter:

constant SpeedInc = 2.5f : float;
constant minSpeed = 30.0f : float;
constant maxSpeed = 150.0f : float;

input CruiseState : integer; %1 = OFF, 2 = ON, 3 = STDBY, 4 = DISABLE
input Set;
input QuickAccel;
input QuickDecel;
input csExceedMin;
input csExceedMax;
input Speed : float;
output CruiseSpeed : float;

var varSpeed := 0.0f : float in
trap T in
	loop	
		await tick;
		if not (?CruiseState = 1) then
			varSpeed := ?Speed;
		    emit CruiseSpeed(?Speed);
		    exit T;
		end if;
	end loop;
end trap;

loop
    await tick;
    if not (?CruiseState = 1) then
        
        present csExceedMin then
        	varSpeed := minSpeed;
            %emit CruiseSpeed(minSpeed);
        end present;

        present csExceedMax and not csExceedMin then
        	varSpeed := maxSpeed;
            %emit CruiseSpeed(maxSpeed);
        end present;
        
        present Set and not (csExceedMin or csExceedMax) then
            varSpeed := ?Speed;
            %emit CruiseSpeed(?Speed);
        end present;
        
        present QuickDecel and not (csExceedMin or csExceedMax or Set) then
            varSpeed := pre(?CruiseSpeed) - SpeedInc;
            %emit CruiseSpeed(pre(?CruiseSpeed) - SpeedInc);
        end present;

        present QuickAccel and not (csExceedMin or csExceedMax or Set or QuickDecel) then
            varSpeed := pre(?CruiseSpeed) + SpeedInc;
            %emit CruiseSpeed(pre(?CruiseSpeed) + SpeedInc);
        end present;
        
        emit CruiseSpeed(varSpeed);
        
    end if;
    %emit CruiseSpeed(varSpeed);
end loop;

end var;
end module

module cruiseStateResolver:

input SpeedExceed;
input BrakePressed;
input AccelPressed;
input On;
input Off;
input Resume;
output isGoingOn : boolean;
output CruiseState : integer; %1 = OFF; 2 = ON; 3 = STDBY; 4 = DISABLE

var state := 1 : integer in
loop

    await tick;
    if state = 1 then
        present (On and not Off) then
            state := 2;
            emit CruiseState(2);
            emit isGoingOn(true);
        else 
            state := 1;
            emit CruiseState(1);
            emit isGoingOn(false);
        end present;
    elsif state = 2 then
        present not(SpeedExceed or AccelPressed or BrakePressed or Off) then
            state := 2;
            emit CruiseState(2);
            emit isGoingOn(false);
        end present;
        present ((SpeedExceed or AccelPressed) and not BrakePressed) then
            state := 4;
            emit CruiseState(4);
            emit isGoingOn(false);
        end present;
        present Off and not (BrakePressed or On) then
            state := 1;
            emit CruiseState(1);
            emit isGoingOn(false);
        end present;
        present (BrakePressed) then
            state := 3;
            emit CruiseState(3);
            emit isGoingOn(false);
        end present;
    elsif state = 3 then
        present (BrakePressed or not Resume) then
            state := 3;
            emit CruiseState(3);
            emit isGoingOn(false);
        end present;
        present (Resume and (AccelPressed or SpeedExceed)) then
            state := 4;
            emit CruiseState(4);
            emit isGoingOn(false);
        end present;
        present (Resume and not(BrakePressed or AccelPressed or SpeedExceed)) then
            state := 2;
            emit CruiseState(2);
            emit isGoingOn(true);
        end present;
    elsif state = 4 then
        present (SpeedExceed or AccelPressed) then
            state := 4;
            emit CruiseState(4);
            emit isGoingOn(false);
        else
            state := 2;
            emit CruiseState(2);
            emit isGoingOn(true);
        end present;
    end if;

end loop;
end var;
end module

module speedMonitor:

constant minSpeed = 30.0f : float;
constant maxSpeed = 150.0f : float;
input Speed : float; %Car speed sensor
output SpeedExceed; %Signal whether min/max speed exceeded

loop
    await tick;
    if ?Speed > maxSpeed then
        emit SpeedExceed;
    elsif ?Speed < minSpeed then
        emit SpeedExceed;
    end if;
end loop
end module

module throttleController:

%Below are functions to be defined in cruisecontrol_data.c
function regulateThrottle(boolean, float, float) : float;

input CruiseState : integer;
input isGoingOn : boolean;
input CruiseSpeed : float;
input Speed : float;
output ThrottleCmd : float;

loop
    await tick;
    if ?CruiseState = 2 then
        emit ThrottleCmd(regulateThrottle(?isGoingOn,?CruiseSpeed,?Speed));
    else
        emit ThrottleCmd(0.0f);
    end if;
end loop

end module

module cruisecontrol:

%Interface
%Inputs
input On; %Enable the cruise control
input Off; %Disable the cruise control
input Resume; %Resume the cruise control after braking
input Set; %Set current speed as new cruise speed
input QuickDecel; %Decrease cruise speed
input QuickAccel; %Increase cruise speed
input Accel : float; %Accelerator pedal sensor
input Brake : float; %Brake pedal sensor
input Speed : float; %Car speed sensor

%Outputs
output CruiseSpeed : float; %Cruise speed value
output ThrottleCmd : float; %Throtle command
output CruiseState : integer; %1 = OFF; 2 = ON; 3 = STDBY; 4 = DISABLE

signal SpeedExceed in
signal BrakePressed in
signal AccelPressed in
signal isGoingOn : boolean in
signal csExceedMin in
signal csExceedMax in

run accelMonitor[
					signal Accel/Accel;
					signal AccelPressed/AccelPressed
				]
||
run brakeMonitor[
					signal Brake/Brake;
					signal BrakePressed/BrakePressed
				]
||
run cruiseSpeedMonitor[
					  	signal CruiseSpeed/CruiseSpeed;
					  	signal csExceedMin/csExceedMin;
					  	signal csExceedMax/csExceedMax
					  ]
||
run cruiseSpeedSetter[
						signal CruiseState/CruiseState;
					 	signal Set/Set;
					 	signal QuickAccel/QuickAccel;
					 	signal QuickDecel/QuickDecel;
					 	signal csExceedMin/csExceedMin;
					 	signal csExceedMax/csExceedMax;
					 	signal Speed/Speed;
					 	signal CruiseSpeed/CruiseSpeed
					 ]
||
run cruiseStateResolver[
					   		signal SpeedExceed/SpeedExceed;
					   		signal BrakePressed/BrakePressed;
					   		signal AccelPressed/AccelPressed;
					   		signal On/On;
					   		signal Off/Off;
					   		signal Resume/Resume;
					   		signal isGoingOn/isGoingOn;
					   		signal CruiseState/CruiseState
					   ]
||
run speedMonitor[
					signal Speed/Speed;
					signal SpeedExceed/SpeedExceed
				]
||
run throttleController[
							signal CruiseState/CruiseState;
							signal isGoingOn/isGoingOn;
							signal CruiseSpeed/CruiseSpeed;
							signal Speed/Speed;
							signal ThrottleCmd/ThrottleCmd
					  ]
end signal;
end signal;
end signal;
end signal;
end signal;
end signal;

end module
