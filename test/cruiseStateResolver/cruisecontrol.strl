module speedMonitor:

%constant minSpeed = 30 : integer;
%constant maxSpeed = 150 : integer;
input Speed : float; %Car speed sensor
output SpeedExceed; %Signal whether min/max speed exceeded

loop
    await Speed;
    if ?Speed > 150.0 then
        emit SpeedExceed;
    end if;

    if ?Speed < 30.0 then
        emit SpeedExceed;
    end if;
end loop
end module

module accelMonitor:

%constant minPedals = 3 : integer;
input Accel : float; %Car accelerator sensor
output AccelPressed; %Signal whether accelerator is pressed or not

loop
    await Accel;
    if ?Accel > 3.0 then
        emit AccelPressed;
    end if;
end loop
end module

module brakeMonitor:

%constant minPedals = 3 : integer;
input Brake : float; %Car brake sensor
output BrakePressed; %Signal whether brake is pressed or not

loop
    await Brake;
    if ?Brake > 3.0 then
        emit BrakePressed;
    end if;
end loop
end module

module cruiseSpeedMonitor:
end module;

module cruiseStateResolver:
end module;

module cruiseSpeedSetter:
end module;

module throttleController:
end module;

module cruisecontrol:

%Below are functions to be defined in cruisecontrol_data.c
function saturateThrottle(float, boolean) : float;
function regulateThrottle(boolean, float, float) : float;

%Interface
%Inputs
input On; %Enable the cruise control
input Off; %Disable the cruise control
input Resume; %Resume the cruise control after braking
input Set; %Set current speed as new cruise speed
input QuickDecel; %Decrease cruise speed
input QuickAccel; %Increase cruise speed
input Accel : float; %Accelerator pedal sensor
input Brake : float; %Brake pedal sensor
input Speed : float; %Car speed sensor

%Outputs
output CruiseSpeed : float; %Cruise speed value
output ThrottleCmd : float; %Throtle command
output CruiseState : enum{OFF, ON, STDY, DISABLE};
%output CruiseState := 1 : integer; %1 = OFF; 2 = ON; 3 = STDBY; 4 = DISABLE;

end module
